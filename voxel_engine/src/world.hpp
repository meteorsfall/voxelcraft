#ifndef _WORLD_HPP_
#define _WORLD_HPP_

#include "utils.hpp"
#include "aabb.hpp"
#include "chunk.hpp"
#include "megachunk.hpp"
#include "texture_atlasser.hpp"
#include "universe.hpp"

/// Callback type for a collision event
using fn_on_collide = std::function<void(vec3)>;

/// \cond HIDDEN_SYMBOLS

class IVec3Hasher
{
public:
  size_t operator() (ivec3 const& key) const
  {
    return hash_ivec3(key);
  }
};
class IVec3EqualFn
{
public:
  bool operator() (ivec3 const& t1, ivec3 const& t2) const
  {
    return t1 == t2;
  }
};

/// \endcond

/**
 *\addtogroup VoxelEngine
 * @{
 */

/// The World class refers to a single VoxelEngine world

class World {
public:
    /// The world ID that uniquely identifies this world
    int world_id;

    /// Creates a new world with no loaded chunks
    World();

    /// Sets a block to the given blocktype
    void set_block(int x, int y, int z, int block_type);

    /// Retrieves the blockdata for the requested block
    BlockData* get_block(int x, int y, int z);
    
    /// Invalidates the cache of this block and its neighbors
    void refresh_block(int x, int y, int z);

    /// Mark a chunk for rendering.
    /**
     * @param chunk_coords the chunk coordinates of the chunk that is to be marked for rendering
     * @param priority The priority of the chunk render. If several chunks have yet to be rendered,
     * only a single chunk mesh will be generated per frame. The chunk with the lowest priority value
     * will be rendered first. A chunk with priority 0 is guaranteed to be rendered, regardless of
     * how long it takes.
     */ 
    void mark_chunk(ivec3 chunk_coords, int priority);

    /// Mark a chunk as having been generated by the world generator
    void mark_generated(ivec3 chunk_coords);

    /// Returns true if the chunk has been generated by the world generated
    bool is_generated(ivec3 chunk_coords);

    /// Renders the world, based on the marked chunks
    void render(mat4& P, mat4& V, TextureAtlasser& atlasser);

    /// Returns true if the given position is inside of a non-air block
    bool is_in_block(vec3 position);

    /// Casts a ray onto the first block that the ray intersects. Returns the intersected block, if any
    /**
     * @param position The origin of the raycast
     * @param direction The direction of the raycast
     * @param max_distance The farthest that the raycast will go
     * @param previous_block If true, will return the block _before_ the one that received the raycast
     * 
     * @returns An ivec3 represents the block that the raycast first intersected, or nullopt if no such block was found
     */
    optional<ivec3> raycast(vec3 position, vec3 direction, float max_distance, bool previous_block = false);

    /// Collide the given collision box with the world. 
    /**
     * on_collide may be called several times as the world tries to push
     * the collision_box out of intersecting with it
     * @param collision_box The collision box that the world must try to push out
     * @param on_collide The callback that will be executed for every collision that the collision_box must go through.
     * on_collide will be given a vec3 showing what translation is needed to exit the collision situation.
     */
    void collide(AABB collision_box, fn_on_collide on_collide);

    /// Save the world to the given filepath
    void save(const char* filepath);
    /// Load the world from the given filepath
    bool load(const char* filepath);
    
private:
    string save_filepath;

    // Map from megachunk_coords to megachunks is here
    unordered_map<ivec3, MegaChunk, IVec3Hasher, IVec3EqualFn> megachunks;
    unordered_map<ivec3, string, IVec3Hasher, IVec3EqualFn> disk_megachunks;

    Chunk* get_chunk(int x, int y, int z);

    vector<pair<int, ivec3>> marked_chunks;
    ChunkData* get_chunk_data(ivec3 chunk_coords);
    void load_disk_megachunk(ivec3 megachunk_coords);
    void save_megachunk(ivec3 megachunk_coords, bool keep_in_memory = false);
    Chunk* make_chunk(int x, int y, int z);
    int render_iteration = 0;
};

/**@}*/

#endif
