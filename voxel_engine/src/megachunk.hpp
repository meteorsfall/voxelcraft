#ifndef _MEGACHUNK_HPP_
#define _MEGACHUNK_HPP_

#include "chunk.hpp"
#include "universe.hpp"

/**
 *\addtogroup VoxelEngine
 * @{
 */

/// The ChunkData class represents a Chunk, along with any metadata for that chunk 

class ChunkData {
public:
    /// Creates a blank ChunkData, with a blank Chunk consisting of only air blocks
    ChunkData();
    /// The last tick in which this Chunk was marked for render
    int last_render_mark = 0;
    /// The render priority that this chunk has
    int priority;
    /// True if this Chunk has been generated by the world generated already
    bool generated = false;
    /// The Chunk itself
    Chunk chunk;
};

/// The amount of chunks wide a MegaChunk is in any direction
#define MEGACHUNK_SIZE 16

/// The MegaChunk class represents a @ref MEGACHUNK_SIZE x @ref MEGACHUNK_SIZE x @ref MEGACHUNK_SIZE group of chunks

class MegaChunk {
public:
  ~MegaChunk();
  /// Location of the megachunk, in megachunk-coordinates
  ivec3 location;
  /// Create a new chunk, at the given chunk coordinates (Between 0 and MEGACHUNK_SIZE-1)
  ChunkData* create_chunk(ivec3 chunk_coords);
  /// Get a chunk in this megachunk, at the given chunk coordinates (Between 0 and MEGACHUNK_SIZE-1)
  ChunkData* get_chunk(ivec3 chunk_coords);
  /// Serialize the megachunk into a buffer
  pair<byte*, int> serialize();
  /// Deserialize the megachunk from a buffer
  void deserialize(byte* buffer, int size);
private:
  /// Array of chunkdata, as an index to the chunk allocation
  optional<int> chunks[MEGACHUNK_SIZE][MEGACHUNK_SIZE][MEGACHUNK_SIZE];
};

/**@}*/

#define CHUNK_METADATA_SIZE (1+3)
#define TOTAL_SERIALIZED_CHUNK_SIZE (CHUNK_METADATA_SIZE+SERIALIZED_CHUNK_SIZE)

#define MEGACHUNK_METADATA_SIZE (1+3*3)
#define MAX_MEGACHUNK_SIZE (MEGACHUNK_METADATA_SIZE+MEGACHUNK_SIZE*MEGACHUNK_SIZE*MEGACHUNK_SIZE*TOTAL_SERIALIZED_CHUNK_SIZE)

extern byte megachunk_serialization_buffer[MAX_MEGACHUNK_SIZE];

#endif
